// Code generated by MockGen. DO NOT EDIT.
// Source: wallet.go
//
// Generated by this command:
//
//	mockgen -source=wallet.go -destination=mock/wallet_mocks.go -package contract_mock
//
// Package contract_mock is a generated GoMock package.
package contract_mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/buni/wallet/internal/api/app/entity"
	request "github.com/buni/wallet/internal/api/app/request"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWalletRepository) Create(ctx context.Context, wallet entity.Wallet) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, wallet)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWalletRepositoryMockRecorder) Create(ctx, wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletRepository)(nil).Create), ctx, wallet)
}

// Get mocks base method.
func (m *MockWalletRepository) Get(ctx context.Context, id string) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWalletRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWalletRepository)(nil).Get), ctx, id)
}

// MockWalletEventRepository is a mock of WalletEventRepository interface.
type MockWalletEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletEventRepositoryMockRecorder
}

// MockWalletEventRepositoryMockRecorder is the mock recorder for MockWalletEventRepository.
type MockWalletEventRepositoryMockRecorder struct {
	mock *MockWalletEventRepository
}

// NewMockWalletEventRepository creates a new mock instance.
func NewMockWalletEventRepository(ctrl *gomock.Controller) *MockWalletEventRepository {
	mock := &MockWalletEventRepository{ctrl: ctrl}
	mock.recorder = &MockWalletEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletEventRepository) EXPECT() *MockWalletEventRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWalletEventRepository) Create(ctx context.Context, event entity.WalletEvent) (entity.WalletEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, event)
	ret0, _ := ret[0].(entity.WalletEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWalletEventRepositoryMockRecorder) Create(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletEventRepository)(nil).Create), ctx, event)
}

// ListByWalletID mocks base method.
func (m *MockWalletEventRepository) ListByWalletID(ctx context.Context, walletID string) ([]entity.WalletEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByWalletID", ctx, walletID)
	ret0, _ := ret[0].([]entity.WalletEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByWalletID indicates an expected call of ListByWalletID.
func (mr *MockWalletEventRepositoryMockRecorder) ListByWalletID(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByWalletID", reflect.TypeOf((*MockWalletEventRepository)(nil).ListByWalletID), ctx, walletID)
}

// MockWalletProjectionRepository is a mock of WalletProjectionRepository interface.
type MockWalletProjectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletProjectionRepositoryMockRecorder
}

// MockWalletProjectionRepositoryMockRecorder is the mock recorder for MockWalletProjectionRepository.
type MockWalletProjectionRepositoryMockRecorder struct {
	mock *MockWalletProjectionRepository
}

// NewMockWalletProjectionRepository creates a new mock instance.
func NewMockWalletProjectionRepository(ctrl *gomock.Controller) *MockWalletProjectionRepository {
	mock := &MockWalletProjectionRepository{ctrl: ctrl}
	mock.recorder = &MockWalletProjectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletProjectionRepository) EXPECT() *MockWalletProjectionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWalletProjectionRepository) Create(ctx context.Context, projection entity.WalletProjection) (entity.WalletProjection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, projection)
	ret0, _ := ret[0].(entity.WalletProjection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWalletProjectionRepositoryMockRecorder) Create(ctx, projection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletProjectionRepository)(nil).Create), ctx, projection)
}

// Get mocks base method.
func (m *MockWalletProjectionRepository) Get(ctx context.Context, walletID string) (entity.WalletProjection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, walletID)
	ret0, _ := ret[0].(entity.WalletProjection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWalletProjectionRepositoryMockRecorder) Get(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWalletProjectionRepository)(nil).Get), ctx, walletID)
}

// Update mocks base method.
func (m *MockWalletProjectionRepository) Update(ctx context.Context, projection entity.WalletProjection) (entity.WalletProjection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, projection)
	ret0, _ := ret[0].(entity.WalletProjection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWalletProjectionRepositoryMockRecorder) Update(ctx, projection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWalletProjectionRepository)(nil).Update), ctx, projection)
}

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// CompleteTransfer mocks base method.
func (m *MockWalletService) CompleteTransfer(ctx context.Context, req *request.CompleteTransfer) (entity.WalletEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTransfer", ctx, req)
	ret0, _ := ret[0].(entity.WalletEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTransfer indicates an expected call of CompleteTransfer.
func (mr *MockWalletServiceMockRecorder) CompleteTransfer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTransfer", reflect.TypeOf((*MockWalletService)(nil).CompleteTransfer), ctx, req)
}

// Create mocks base method.
func (m *MockWalletService) Create(ctx context.Context, req *request.CreateWallet) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWalletServiceMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletService)(nil).Create), ctx, req)
}

// CreditTransfer mocks base method.
func (m *MockWalletService) CreditTransfer(ctx context.Context, req *request.CreditTransfer) (entity.WalletEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditTransfer", ctx, req)
	ret0, _ := ret[0].(entity.WalletEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreditTransfer indicates an expected call of CreditTransfer.
func (mr *MockWalletServiceMockRecorder) CreditTransfer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditTransfer", reflect.TypeOf((*MockWalletService)(nil).CreditTransfer), ctx, req)
}

// DebitTransfer mocks base method.
func (m *MockWalletService) DebitTransfer(ctx context.Context, req *request.DebitTransfer) (entity.WalletEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitTransfer", ctx, req)
	ret0, _ := ret[0].(entity.WalletEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitTransfer indicates an expected call of DebitTransfer.
func (mr *MockWalletServiceMockRecorder) DebitTransfer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitTransfer", reflect.TypeOf((*MockWalletService)(nil).DebitTransfer), ctx, req)
}

// Get mocks base method.
func (m *MockWalletService) Get(ctx context.Context, req *request.GetWallet) (entity.WalletBalanceProjection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(entity.WalletBalanceProjection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWalletServiceMockRecorder) Get(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWalletService)(nil).Get), ctx, req)
}

// RebuildWalletProjection mocks base method.
func (m *MockWalletService) RebuildWalletProjection(ctx context.Context, event *entity.WalletEvent) (entity.WalletProjection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildWalletProjection", ctx, event)
	ret0, _ := ret[0].(entity.WalletProjection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebuildWalletProjection indicates an expected call of RebuildWalletProjection.
func (mr *MockWalletServiceMockRecorder) RebuildWalletProjection(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildWalletProjection", reflect.TypeOf((*MockWalletService)(nil).RebuildWalletProjection), ctx, event)
}

// RevertTransfer mocks base method.
func (m *MockWalletService) RevertTransfer(ctx context.Context, req *request.RevertTransfer) (entity.WalletEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevertTransfer", ctx, req)
	ret0, _ := ret[0].(entity.WalletEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevertTransfer indicates an expected call of RevertTransfer.
func (mr *MockWalletServiceMockRecorder) RevertTransfer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertTransfer", reflect.TypeOf((*MockWalletService)(nil).RevertTransfer), ctx, req)
}

// MockWalletEventPublisher is a mock of WalletEventPublisher interface.
type MockWalletEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockWalletEventPublisherMockRecorder
}

// MockWalletEventPublisherMockRecorder is the mock recorder for MockWalletEventPublisher.
type MockWalletEventPublisherMockRecorder struct {
	mock *MockWalletEventPublisher
}

// NewMockWalletEventPublisher creates a new mock instance.
func NewMockWalletEventPublisher(ctrl *gomock.Controller) *MockWalletEventPublisher {
	mock := &MockWalletEventPublisher{ctrl: ctrl}
	mock.recorder = &MockWalletEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletEventPublisher) EXPECT() *MockWalletEventPublisherMockRecorder {
	return m.recorder
}

// PublishCreated mocks base method.
func (m *MockWalletEventPublisher) PublishCreated(ctx context.Context, event entity.WalletEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishCreated", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishCreated indicates an expected call of PublishCreated.
func (mr *MockWalletEventPublisherMockRecorder) PublishCreated(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishCreated", reflect.TypeOf((*MockWalletEventPublisher)(nil).PublishCreated), ctx, event)
}
